// Code generated by ent, DO NOT EDIT.

package hole

import (
	"golfapp/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Hole {
	return predicate.Hole(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Hole {
	return predicate.Hole(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Hole {
	return predicate.Hole(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Hole {
	return predicate.Hole(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Hole {
	return predicate.Hole(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Hole {
	return predicate.Hole(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Hole {
	return predicate.Hole(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Hole {
	return predicate.Hole(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Hole {
	return predicate.Hole(sql.FieldLTE(FieldID, id))
}

// HoleNumber applies equality check predicate on the "hole_number" field. It's identical to HoleNumberEQ.
func HoleNumber(v int) predicate.Hole {
	return predicate.Hole(sql.FieldEQ(FieldHoleNumber, v))
}

// HoleName applies equality check predicate on the "hole_name" field. It's identical to HoleNameEQ.
func HoleName(v string) predicate.Hole {
	return predicate.Hole(sql.FieldEQ(FieldHoleName, v))
}

// HoleNumberEQ applies the EQ predicate on the "hole_number" field.
func HoleNumberEQ(v int) predicate.Hole {
	return predicate.Hole(sql.FieldEQ(FieldHoleNumber, v))
}

// HoleNumberNEQ applies the NEQ predicate on the "hole_number" field.
func HoleNumberNEQ(v int) predicate.Hole {
	return predicate.Hole(sql.FieldNEQ(FieldHoleNumber, v))
}

// HoleNumberIn applies the In predicate on the "hole_number" field.
func HoleNumberIn(vs ...int) predicate.Hole {
	return predicate.Hole(sql.FieldIn(FieldHoleNumber, vs...))
}

// HoleNumberNotIn applies the NotIn predicate on the "hole_number" field.
func HoleNumberNotIn(vs ...int) predicate.Hole {
	return predicate.Hole(sql.FieldNotIn(FieldHoleNumber, vs...))
}

// HoleNumberGT applies the GT predicate on the "hole_number" field.
func HoleNumberGT(v int) predicate.Hole {
	return predicate.Hole(sql.FieldGT(FieldHoleNumber, v))
}

// HoleNumberGTE applies the GTE predicate on the "hole_number" field.
func HoleNumberGTE(v int) predicate.Hole {
	return predicate.Hole(sql.FieldGTE(FieldHoleNumber, v))
}

// HoleNumberLT applies the LT predicate on the "hole_number" field.
func HoleNumberLT(v int) predicate.Hole {
	return predicate.Hole(sql.FieldLT(FieldHoleNumber, v))
}

// HoleNumberLTE applies the LTE predicate on the "hole_number" field.
func HoleNumberLTE(v int) predicate.Hole {
	return predicate.Hole(sql.FieldLTE(FieldHoleNumber, v))
}

// HoleNameEQ applies the EQ predicate on the "hole_name" field.
func HoleNameEQ(v string) predicate.Hole {
	return predicate.Hole(sql.FieldEQ(FieldHoleName, v))
}

// HoleNameNEQ applies the NEQ predicate on the "hole_name" field.
func HoleNameNEQ(v string) predicate.Hole {
	return predicate.Hole(sql.FieldNEQ(FieldHoleName, v))
}

// HoleNameIn applies the In predicate on the "hole_name" field.
func HoleNameIn(vs ...string) predicate.Hole {
	return predicate.Hole(sql.FieldIn(FieldHoleName, vs...))
}

// HoleNameNotIn applies the NotIn predicate on the "hole_name" field.
func HoleNameNotIn(vs ...string) predicate.Hole {
	return predicate.Hole(sql.FieldNotIn(FieldHoleName, vs...))
}

// HoleNameGT applies the GT predicate on the "hole_name" field.
func HoleNameGT(v string) predicate.Hole {
	return predicate.Hole(sql.FieldGT(FieldHoleName, v))
}

// HoleNameGTE applies the GTE predicate on the "hole_name" field.
func HoleNameGTE(v string) predicate.Hole {
	return predicate.Hole(sql.FieldGTE(FieldHoleName, v))
}

// HoleNameLT applies the LT predicate on the "hole_name" field.
func HoleNameLT(v string) predicate.Hole {
	return predicate.Hole(sql.FieldLT(FieldHoleName, v))
}

// HoleNameLTE applies the LTE predicate on the "hole_name" field.
func HoleNameLTE(v string) predicate.Hole {
	return predicate.Hole(sql.FieldLTE(FieldHoleName, v))
}

// HoleNameContains applies the Contains predicate on the "hole_name" field.
func HoleNameContains(v string) predicate.Hole {
	return predicate.Hole(sql.FieldContains(FieldHoleName, v))
}

// HoleNameHasPrefix applies the HasPrefix predicate on the "hole_name" field.
func HoleNameHasPrefix(v string) predicate.Hole {
	return predicate.Hole(sql.FieldHasPrefix(FieldHoleName, v))
}

// HoleNameHasSuffix applies the HasSuffix predicate on the "hole_name" field.
func HoleNameHasSuffix(v string) predicate.Hole {
	return predicate.Hole(sql.FieldHasSuffix(FieldHoleName, v))
}

// HoleNameEqualFold applies the EqualFold predicate on the "hole_name" field.
func HoleNameEqualFold(v string) predicate.Hole {
	return predicate.Hole(sql.FieldEqualFold(FieldHoleName, v))
}

// HoleNameContainsFold applies the ContainsFold predicate on the "hole_name" field.
func HoleNameContainsFold(v string) predicate.Hole {
	return predicate.Hole(sql.FieldContainsFold(FieldHoleName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Hole) predicate.Hole {
	return predicate.Hole(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Hole) predicate.Hole {
	return predicate.Hole(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Hole) predicate.Hole {
	return predicate.Hole(func(s *sql.Selector) {
		p(s.Not())
	})
}
