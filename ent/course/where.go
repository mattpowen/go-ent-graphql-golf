// Code generated by ent, DO NOT EDIT.

package course

import (
	"golfapp/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldID, id))
}

// CourseName applies equality check predicate on the "course_name" field. It's identical to CourseNameEQ.
func CourseName(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseName, v))
}

// CourseLocation applies equality check predicate on the "course_location" field. It's identical to CourseLocationEQ.
func CourseLocation(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseLocation, v))
}

// CourseNameEQ applies the EQ predicate on the "course_name" field.
func CourseNameEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseName, v))
}

// CourseNameNEQ applies the NEQ predicate on the "course_name" field.
func CourseNameNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldCourseName, v))
}

// CourseNameIn applies the In predicate on the "course_name" field.
func CourseNameIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldCourseName, vs...))
}

// CourseNameNotIn applies the NotIn predicate on the "course_name" field.
func CourseNameNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldCourseName, vs...))
}

// CourseNameGT applies the GT predicate on the "course_name" field.
func CourseNameGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldCourseName, v))
}

// CourseNameGTE applies the GTE predicate on the "course_name" field.
func CourseNameGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldCourseName, v))
}

// CourseNameLT applies the LT predicate on the "course_name" field.
func CourseNameLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldCourseName, v))
}

// CourseNameLTE applies the LTE predicate on the "course_name" field.
func CourseNameLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldCourseName, v))
}

// CourseNameContains applies the Contains predicate on the "course_name" field.
func CourseNameContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldCourseName, v))
}

// CourseNameHasPrefix applies the HasPrefix predicate on the "course_name" field.
func CourseNameHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldCourseName, v))
}

// CourseNameHasSuffix applies the HasSuffix predicate on the "course_name" field.
func CourseNameHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldCourseName, v))
}

// CourseNameEqualFold applies the EqualFold predicate on the "course_name" field.
func CourseNameEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldCourseName, v))
}

// CourseNameContainsFold applies the ContainsFold predicate on the "course_name" field.
func CourseNameContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldCourseName, v))
}

// CourseLocationEQ applies the EQ predicate on the "course_location" field.
func CourseLocationEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseLocation, v))
}

// CourseLocationNEQ applies the NEQ predicate on the "course_location" field.
func CourseLocationNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldCourseLocation, v))
}

// CourseLocationIn applies the In predicate on the "course_location" field.
func CourseLocationIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldCourseLocation, vs...))
}

// CourseLocationNotIn applies the NotIn predicate on the "course_location" field.
func CourseLocationNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldCourseLocation, vs...))
}

// CourseLocationGT applies the GT predicate on the "course_location" field.
func CourseLocationGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldCourseLocation, v))
}

// CourseLocationGTE applies the GTE predicate on the "course_location" field.
func CourseLocationGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldCourseLocation, v))
}

// CourseLocationLT applies the LT predicate on the "course_location" field.
func CourseLocationLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldCourseLocation, v))
}

// CourseLocationLTE applies the LTE predicate on the "course_location" field.
func CourseLocationLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldCourseLocation, v))
}

// CourseLocationContains applies the Contains predicate on the "course_location" field.
func CourseLocationContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldCourseLocation, v))
}

// CourseLocationHasPrefix applies the HasPrefix predicate on the "course_location" field.
func CourseLocationHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldCourseLocation, v))
}

// CourseLocationHasSuffix applies the HasSuffix predicate on the "course_location" field.
func CourseLocationHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldCourseLocation, v))
}

// CourseLocationEqualFold applies the EqualFold predicate on the "course_location" field.
func CourseLocationEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldCourseLocation, v))
}

// CourseLocationContainsFold applies the ContainsFold predicate on the "course_location" field.
func CourseLocationContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldCourseLocation, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Course) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		p(s.Not())
	})
}
